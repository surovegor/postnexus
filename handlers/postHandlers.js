const { Markup } = require('telegraf');
require('dotenv').config();
const API_TOKEN = process.env.API_TOKEN;

module.exports = function (bot, userSelectedChannels, scheduledPosts) {

  const API_URL = 'https://api.intelligence.io.solutions/api/v1/chat/completions';

  function cleanAIResponse(text) {
    return text.replace(/<think>[\s\S]*?<\/think>/g, '').trim();
  }

  async function improveTextWithAI(text) {
    try {
      const response = await fetch(API_URL, {
        method: 'POST',
        headers: {
          'Accept': 'application/json',
          'Authorization': `Bearer ${API_TOKEN}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          model: "deepseek-ai/DeepSeek-R1",
          messages: [
            {
              role: "system",
              content: "–ò—Å–ø—Ä–∞–≤—å –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ, –ø—É–Ω–∫—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã–µ –∏ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ. –°–æ—Ö—Ä–∞–Ω–∏ –∏—Å—Ö–æ–¥–Ω—ã–π —Å—Ç–∏–ª—å –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–µ–∫—Å—Ç–∞. –ù–µ –¥–æ–±–∞–≤–ª—è–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è (<think>) –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è. –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Ç–µ–∫—Å—Ç–∞, –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π. –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞: 1. –ò—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫–∏, –Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏ –∞–≤—Ç–æ—Ä—Å–∫–∏–π —Å—Ç–∏–ª—å 2. –ù–µ –º–µ–Ω—è–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π 3. –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã –∏–ª–∏ —Å–ª–æ–≤–∞ 4. –í–µ—Ä–Ω–∏ —Ä–æ–≤–Ω–æ —Ç–æ—Ç –∂–µ —Ç–µ–∫—Å—Ç, –Ω–æ –±–µ–∑ –æ—à–∏–±–æ–∫ 5. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ç–µ–≥–∏ <think> –∏ –ø–æ–¥–æ–±–Ω—ã–µ 6. –ù–µ –ø–∏—à–∏ –Ω–∏—á–µ–≥–æ –∫—Ä–æ–º–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"
            },
            {
              role: "user",
              content: text
            }
          ],
          temperature: 0.7
        })
      });

      if (!response.ok) {
        throw new Error(`API error: ${response.status}`);
      }
      
      const data = await response.json();
      const rawText = data.choices[0]?.message?.content || text;
      return cleanAIResponse(rawText);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API:', error);
      return text;
    }
  }

  async function showPostWithOptions(ctx, postContent) {
    const userId = ctx.from.id;
    const selectedChannel = userSelectedChannels.get(userId);
    
    const keyboard = Markup.inlineKeyboard([
      [{ text: '–£–ª—É—á—à–∏—Ç—å —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏', callback_data: 'improve_post' }],
      [{ text: '–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å—å', callback_data: 'add_signature' }],
      [{ text: '–û—Ç–ª–æ–∂–∏—Ç—å', callback_data: 'schedule_post' }]
    ]);

    if (postContent.media) {
      await ctx.replyWithPhoto(postContent.media, {
        caption: postContent.text,
        caption_entities: postContent.entities,
        reply_markup: keyboard.reply_markup
      });
    } else {
      await ctx.reply(postContent.text, {
        entities: postContent.entities,
        reply_markup: keyboard.reply_markup
      });
    }
  }

  function startCreatingPost(ctx) {
    const userId = ctx.from.id;
    const selectedChannel = userSelectedChannels.get(userId);

    if (!selectedChannel) {
      ctx.reply('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.');
      return;
    }

    ctx.reply(`–ü–æ—Å—Ç –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ ${selectedChannel.name}.\n\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —Ç–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å.`);
    ctx.session.creatingPost = true;
  }

  bot.command('newpost', (ctx) => startCreatingPost(ctx));
  bot.hears('–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç', (ctx) => startCreatingPost(ctx));

  bot.on('message', async (ctx) => {
    const userId = ctx.from.id;
    const selectedChannel = userSelectedChannels.get(userId);
    
    if (!ctx.session.creatingPost && !ctx.session.schedulingPost && selectedChannel) {
      ctx.session.creatingPost = true;
    }

    if (ctx.session.creatingPost) {
      if (!selectedChannel) {
        ctx.reply('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.');
        ctx.session.creatingPost = false;
        return;
      }

      const postContent = {
        text: ctx.message.text || ctx.message.caption,
        entities: ctx.message.entities || ctx.message.caption_entities,
        media: ctx.message.photo ? ctx.message.photo[0].file_id : null,
      };

      ctx.session.postContent = postContent;
      await showPostWithOptions(ctx, postContent);
      ctx.session.creatingPost = false;
      return;
    }

    if (ctx.session.schedulingPost && ctx.message.text) {
      if (!selectedChannel) {
        ctx.reply('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.');
        ctx.session.schedulingPost = false;
        return;
      }

      const timeInput = ctx.message.text;
      const [datePart, timePart] = timeInput.split(' ');

      if (!datePart || !timePart) {
        ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú.');
        return;
      }

      const [day, month, year] = datePart.split('.');
      const [hour, minute] = timePart.split(':');

      if (!day || !month || !year || !hour || !minute) {
        ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú.');
        return;
      }

      const scheduledTime = new Date(`${year}-${month}-${day}T${hour}:${minute}:00`);

      if (isNaN(scheduledTime.getTime())) {
        ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –∏–ª–∏ –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        return;
      }

      if (scheduledTime.getTime() <= Date.now()) {
        ctx.reply('–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.');
        return;
      }

      const post = {
        channelName: selectedChannel.name,
        content: ctx.session.postContent,
        time: scheduledTime,
      };

      const key = `${userId}_${selectedChannel.name}`;

      if (!scheduledPosts.has(key)) {
        scheduledPosts.set(key, []);
      }

      scheduledPosts.get(key).push(post);

      ctx.reply(`–ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ ${scheduledTime.toLocaleString('ru-RU')} –≤ –∫–∞–Ω–∞–ª ${selectedChannel.name}.`);

      setInterval(async () => {
        const now = new Date();
      
        for (const [key, posts] of scheduledPosts.entries()) {
          const readyPosts = posts.filter(post => post.time <= now);
      
          for (const post of readyPosts) {
            try {
              if (post.content.media) {
                await bot.telegram.sendPhoto(post.channelName, post.content.media, {
                  caption: post.content.text,
                  caption_entities: post.content.entities,
                });
              } else {
                await bot.telegram.sendMessage(post.channelName, post.content.text, {
                  entities: post.content.entities,
                });
              }
              console.log(`‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ ${post.channelName} –≤ ${now.toLocaleString('ru-RU')}`);
            } catch (err) {
              console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –≤ ${post.channelName}:`, err);
            }
          }
      
          const remainingPosts = posts.filter(post => post.time > now);
          scheduledPosts.set(key, remainingPosts);
        }
      }, 60 * 1000);
      
      ctx.session.schedulingPost = false;
      return;
    }
  });

  bot.action('schedule_post', (ctx) => {
    const userId = ctx.from.id;
    const selectedChannel = userSelectedChannels.get(userId);

    if (!selectedChannel) {
      ctx.reply('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.');
      return;
    }

    const now = new Date();
    const suggestedTime = new Date(now.getTime() + 60000);
    const formattedTime = suggestedTime.toLocaleString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    }).replace(',', '');

    ctx.reply(`–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, ${formattedTime}):`);
    ctx.session.schedulingPost = true;
  });

  bot.action('improve_post', async (ctx) => {
    try {
        try {
            await ctx.deleteMessage().catch(err => {
                console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', err.message);
            });
        } catch (deleteError) {
            console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:', deleteError.message);
        }

        const loadingMsg = await ctx.reply('üîÑ –£–ª—É—á—à–∞—é —Ç–µ–∫—Å—Ç...');

        const improvedText = await improveTextWithAI(ctx.session.postContent.text);
        
        if (!improvedText) {
            await ctx.answerCbQuery('–ù–µ —É–¥–∞–ª–æ—Å—å —É–ª—É—á—à–∏—Ç—å —Ç–µ–∫—Å—Ç');
            return ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞');
        }

        ctx.session.postContent.text = improvedText;
        ctx.session.postContent.entities = null;

        try {
            await ctx.telegram.deleteMessage(ctx.chat.id, loadingMsg.message_id);
        } catch (e) {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏:', e.message);
        }

        await showPostWithOptions(ctx, ctx.session.postContent);
        
        try {
            await ctx.answerCbQuery();
        } catch (cbError) {
            console.log('Callback —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω:', cbError.message);
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏:', error);
        try {
            await ctx.answerCbQuery('‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è');
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        } catch (e) {
            console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', e.message);
        }
    }
  });

  bot.action('add_signature', async (ctx) => {
    try {
        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        try {
            await ctx.deleteMessage();
        } catch (deleteError) {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', deleteError.message);
        }

        const userId = ctx.from.id;
        const selectedChannel = userSelectedChannels.get(userId);
        
        if (!selectedChannel) {
            await ctx.answerCbQuery('–ö–∞–Ω–∞–ª –Ω–µ –≤—ã–±—Ä–∞–Ω');
            return ctx.reply('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.');
        }

        const originalText = ctx.session.postContent.text;
        const signature = `\n\n${selectedChannel.name}`;
        
        if (!originalText.includes(signature)) {
            ctx.session.postContent.text = originalText + signature;
            ctx.session.postContent.entities = null;
        }

        await showPostWithOptions(ctx, ctx.session.postContent);
        
        await ctx.answerCbQuery('–ü–æ–¥–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∏:', error);
        try {
            await ctx.answerCbQuery('‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏');
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        } catch (e) {
            console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', e.message);
        }
    }
  });
};